/**
 * `定义Puzzle类型，用来表达和一局游戏相关的信息。`
 */
public class Puzzle {
    // `numbers数组存储一局游戏的数字分布`
    int[][] numbers = new int[SudokuConstants.GRID_SIZE][SudokuConstants.GRID_SIZE];
    // `isGiven数组用来存储一局游戏单元格的数字是否暴露的状态`
    boolean[][] isGiven = new boolean[SudokuConstants.GRID_SIZE][SudokuConstants.GRID_SIZE];

    // `根据设定需要猜测的单元个数新生成一局数独`
    // `可以利用猜测的单元个数的多少做为游戏难度级别的设定依据`
    // `这个方法需要对numbers数组和isGiven数组进行更新`
    public void newPuzzle(int cellsToGuess) {
        CellData cellData = new CellData();
        // `hardcodedNumbers是预先设定的一局游戏的数字分布`
        int[][] hardcodedNumbers = cellData.getData();
        for (int row = 0; row < SudokuConstants.GRID_SIZE; ++row) {
            for (int col = 0; col < SudokuConstants.GRID_SIZE; ++col) {
                numbers[row][col] = hardcodedNumbers[row][col];
            }
        }

        // `可以使用cellsToGuess的值初始化isGiven数组中false的数量，即需要猜测的单元格数量`
        // `hardcodedIsGiven是预先设定的有哪些位置的单元格被暴露（在下面的数据中只指定暴露2个单元格）`
        boolean[][] hardcodedIsGiven = cellData.getIsGiven(cellsToGuess);

        for (int row = 0; row < SudokuConstants.GRID_SIZE; ++row) {
            for (int col = 0; col < SudokuConstants.GRID_SIZE; ++col) {
                isGiven[row][col] = hardcodedIsGiven[row][col];
            }
        }
    }
    public void newPuzzle(GameDifficulty difficulty) {
        CellData cellData = new CellData();
        // `hardcodedNumbers是预先设定的一局游戏的数字分布`
        int[][] hardcodedNumbers = cellData.getData();
        for (int row = 0; row < SudokuConstants.GRID_SIZE; ++row) {
            for (int col = 0; col < SudokuConstants.GRID_SIZE; ++col) {
                numbers[row][col] = hardcodedNumbers[row][col];
            }
        }

        // `可以使用cellsToGuess的值初始化isGiven数组中false的数量，即需要猜测的单元格数量`
        // `hardcodedIsGiven是预先设定的有哪些位置的单元格被暴露（在下面的数据中只指定暴露2个单元格）`
        boolean[][] hardcodedIsGiven = cellData.getIsGiven(difficulty);
        for (int row = 0; row < SudokuConstants.GRID_SIZE; ++row) {
            for (int col = 0; col < SudokuConstants.GRID_SIZE; ++col) {
                isGiven[row][col] = hardcodedIsGiven[row][col];
            }
        }
    }
}